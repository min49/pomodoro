{"version":3,"sources":["customHooks/useInterval.js","components/styled-elements.js","components/BreakSetter.js","components/SessionSetter.js","components/Timer.js","theme.js","App.js","serviceWorker.js","index.js"],"names":["useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","Button","styled","button","_templateObject","props","theme","fgPrimary","primary","css","_templateObject2","bgFirst","LabelDiv","div","_templateObject3","fgAccent","SetterWrapper","_templateObject4","bgSecond","Row","_templateObject5","TimerWrapper","_templateObject6","TimerLabel","_templateObject7","TimeDisplay","_templateObject8","BreakSetter","length","inc","dec","react_default","a","createElement","onClick","as","Math","floor","SessionSetter","Timer","timerLabel","reset","timeLeft","startStop","seconds","minute","toString","padStart","second","concat","getMinuteSecondString","GlobalStyle","createGlobalStyle","theme_templateObject","App","_useState","useState","_minuteToSeconds","_useState2","Object","slicedToArray","breakLength","setBreakLength","_useState3","_useState4","sessionLength","setSessionLength","_useState5","_useState6","setTimeLeft","_useState7","_useState8","isRunning","setIsRunning","_useState9","_useState10","isBreak","setIsBreak","beepRef","_withinLengthLimit","setFunction","value","change","newValue","_stopBeep","pause","currentTime","nowIsBreak","timeLeftNow","play","styled_components_browser_esm","components_Timer","components_BreakSetter","components_SessionSetter","ref","src","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sLAyBeA,MArBf,SAAqBC,EAAUC,GAC7B,IAAMC,EAAgBC,mBAGtBC,oBAAU,WACRF,EAAcG,QAAUL,GACvB,CAACA,IAGJI,oBAAU,WAKR,GAAc,OAAVH,EAAgB,CAClB,IAAIK,EAAKC,YALX,WACEL,EAAcG,WAIaJ,GAC3B,OAAO,kBAAMO,cAAcF,MAE5B,CAACL,i5CCpBN,IAAMQ,EAASC,IAAOC,OAAVC,IAGU,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,WAChC,SAAAF,GAAK,OAAIA,EAAMC,MAAMC,WAM5B,SAAAF,GAAK,OACPA,EAAMG,SAAWC,YAAjBC,IACoB,SAAAL,GAAK,OAAIA,EAAMC,MAAMC,WAC1B,SAAAF,GAAK,OAAIA,EAAMC,MAAMK,YAIhCC,EAAWV,IAAOW,IAAVC,IACH,SAAAT,GAAK,OAAIA,EAAMC,MAAMS,WAI1BC,EAAgBd,IAAOW,IAAVI,IAEoB,SAAAZ,GAAK,OAAIA,EAAMC,MAAMY,UAAa,SAAAb,GAAK,OAAIA,EAAMC,MAAMK,UAOxFQ,EAAMjB,IAAOW,IAAVO,KAOHC,EAAenB,IAAOW,IAAVS,IACsB,SAAAjB,GAAK,OAAIA,EAAMC,MAAMK,SAAY,SAAAN,GAAK,OAAIA,EAAMC,MAAMY,WAMxFK,EAAarB,IAAOW,IAAVW,IACL,SAAAnB,GAAK,OAAIA,EAAMC,MAAMC,YAM1BkB,EAAcvB,IAAOW,IAAVa,IAEN,SAAArB,GAAK,OAAIA,EAAMC,MAAMS,WCvCjBY,MAdf,SAAqBtB,GAAO,IACnBuB,EAAoBvB,EAApBuB,OAAQC,EAAYxB,EAAZwB,IAAKC,EAAOzB,EAAPyB,IACpB,OACEC,EAAAC,EAAAC,cAACjB,EAAD,KACEe,EAAAC,EAAAC,cAACrB,EAAD,CAAUd,GAAG,eAAb,gBACAiC,EAAAC,EAAAC,cAACd,EAAD,KACEY,EAAAC,EAAAC,cAAChC,EAAD,CAAQH,GAAG,kBAAkBoC,QAASJ,GAAtC,KACAC,EAAAC,EAAAC,cAACrB,EAAD,CAAUuB,GAAG,OAAOrC,GAAG,gBAAgBsC,KAAKC,MAAMT,EAAS,KAC3DG,EAAAC,EAAAC,cAAChC,EAAD,CAAQH,GAAG,kBAAkBoC,QAASL,GAAtC,QCMOS,MAdf,SAAuBjC,GAAO,IACrBuB,EAAoBvB,EAApBuB,OAAQC,EAAYxB,EAAZwB,IAAKC,EAAOzB,EAAPyB,IACpB,OACEC,EAAAC,EAAAC,cAACjB,EAAD,KACEe,EAAAC,EAAAC,cAACrB,EAAD,CAAUd,GAAG,iBAAb,kBACAiC,EAAAC,EAAAC,cAACd,EAAD,KACEY,EAAAC,EAAAC,cAAChC,EAAD,CAAQH,GAAG,oBAAoBoC,QAASJ,GAAxC,KACAC,EAAAC,EAAAC,cAACrB,EAAD,CAAUuB,GAAG,OAAOrC,GAAG,kBAAkBsC,KAAKC,MAAMT,EAAS,KAC7DG,EAAAC,EAAAC,cAAChC,EAAD,CAAQH,GAAG,oBAAoBoC,QAASL,GAAxC,QCWOU,MAnBf,SAAelC,GAAO,IACbmC,EAA0CnC,EAA1CmC,WAAYC,EAA8BpC,EAA9BoC,MAAOC,EAAuBrC,EAAvBqC,SAAUC,EAAatC,EAAbsC,UAQpC,OACEZ,EAAAC,EAAAC,cAACZ,EAAD,KACEU,EAAAC,EAAAC,cAACV,EAAD,CAAYzB,GAAG,eAAe0C,GAC9BT,EAAAC,EAAAC,cAACR,EAAD,CAAa3B,GAAG,aATpB,SAA+B8C,GAC7B,IAAMC,EAAST,KAAKC,MAAMO,EAAU,IAAIE,WAAWC,SAAS,EAAG,KACzDC,GAAUJ,EAAU,IAAIE,WAAWC,SAAS,EAAG,KACrD,SAAAE,OAAUJ,EAAV,KAAAI,OAAoBD,GAMWE,CAAsBR,IACnDX,EAAAC,EAAAC,cAAChC,EAAD,CAAQO,SAAO,EAACV,GAAG,aAAaoC,QAASS,GAAzC,cACAZ,EAAAC,EAAAC,cAAChC,EAAD,CAAQH,GAAG,QAAQoC,QAASO,GAA5B,8MCfN,IAAMU,EAAcC,YAAHC,KAQX/C,EAAQ,CACZC,UAAW,gBACXQ,SAAU,kBAEVJ,QAAS,cACTO,SAAU,WCyGGoC,MA3Gf,WAAe,IAAAC,EACyBC,mBAASC,EAAiB,IADnDC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACNM,EADMH,EAAA,GACOI,EADPJ,EAAA,GAAAK,EAE6BP,mBAASC,EAAiB,KAFvDO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAENE,EAFMD,EAAA,GAESE,EAFTF,EAAA,GAAAG,EAGmBX,mBAASC,EAAiB,KAH7CW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGNzB,EAHM0B,EAAA,GAGIC,EAHJD,EAAA,GAAAE,EAIqBd,oBAAS,GAJ9Be,EAAAZ,OAAAC,EAAA,EAAAD,CAAAW,EAAA,GAINE,EAJMD,EAAA,GAIKE,EAJLF,EAAA,GAAAG,EAKiBlB,oBAAS,GAL1BmB,EAAAhB,OAAAC,EAAA,EAAAD,CAAAe,EAAA,GAKNE,EALMD,EAAA,GAKGE,EALHF,EAAA,GAMPG,EAAUnF,mBAwChB,SAAS8D,EAAiBZ,GACxB,OAAgB,GAATA,EAGT,SAASkC,EAAmBC,EAAaC,EAAOC,GAC9C,IAEMC,EAAWF,EAAQC,EADN,IAEDC,GAAYA,GAHX,MAIjBH,EAAYG,GA4BhB,SAASC,IACPN,EAAQjF,QAAQwF,QAChBP,EAAQjF,QAAQyF,YAAc,EAGhC,OA7CA/F,EAgBA,WACE,IASwBgG,EATlBC,EAAc9C,EAAW,EAC3B8C,EAAc,GASlBX,EADwBU,GAPJX,GASpBP,EAAYkB,EAAa1B,EAAcI,KAPjB,IAAhBuB,IAeNJ,IACAN,EAAQjF,QAAQ4F,QAfdpB,EAAYmB,KAtBGhB,EAAY,IAAO,MA8CpCzC,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CAAepF,MAAOA,GACpByB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACkB,EAAD,MACApB,EAAAC,EAAAC,cAACd,EAAD,KACEY,EAAAC,EAAAC,cAAC0D,EAAD,CAAOjD,SAAUA,EAAUD,MA3DnC,WACE2C,IACAf,EAAYZ,EAAiB,KAC7BK,EAAeL,EAAiB,IAChCS,EAAiBT,EAAiB,KAClCgB,GAAa,GACbI,GAAW,IAqDoClC,UA/DjD,WACE8B,GAAcD,IA8D6DhC,WAlBpEoC,EAAU,QAAU,UAoBvB7C,EAAAC,EAAAC,cAACd,EAAD,KACEY,EAAAC,EAAAC,cAAC2D,EAAD,CAAahE,OAAQiC,EAAahC,IAxF1C,WACEkD,EAAmBjB,EAAgBD,EAAaJ,EAAiB,KAuFJ3B,IApF/D,WACEiD,EAAmBjB,EAAgBD,EAAaJ,GAAkB,OAoF5D1B,EAAAC,EAAAC,cAAC4D,EAAD,CAAejE,OAAQqC,EAAepC,IAjF9C,WACO2C,GACHO,EAAmBV,EAAa3B,EAAUe,EAAiB,IAE7DsB,EAAmBb,EAAkBD,EAAeR,EAAiB,KA6EF3B,IA1ErE,WACO0C,GACHO,EAAmBV,EAAa3B,EAAUe,GAAkB,IAE9DsB,EAAmBb,EAAkBD,EAAeR,GAAkB,QAwElE1B,EAAAC,EAAAC,cAAA,SAAOnC,GAAG,OAAOgG,IAAKhB,EACfiB,IAAI,uFCrGCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOvE,EAAAC,EAAAC,cAACsE,EAAD,MAAQC,SAASC,eAAe,SD4H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3ebc01a8.chunk.js","sourcesContent":["import {useRef, useEffect} from 'react';\r\n\r\n// Custom Hook from\r\n// https://overreacted.io/making-setinterval-declarative-with-react-hooks/\r\nfunction useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n\r\nexport default useInterval;","import styled, {css} from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n  background: transparent;\r\n  border-radius: 3px;\r\n  border: 2px solid ${props => props.theme.fgPrimary};\r\n  color: ${props => props.theme.fgPrimary};\r\n  cursor: pointer;\r\n  font-size: 16px;\r\n  margin: 0 1em;\r\n  padding 0.25em 1em;\r\n\r\n  ${props =>\r\n  props.primary && css`\r\n        background: ${props => props.theme.fgPrimary};\r\n        color: ${props => props.theme.bgFirst};\r\n      `};\r\n`;\r\n\r\nconst LabelDiv = styled.div`\r\n  color: ${props => props.theme.fgAccent};\r\n  text-align: center;\r\n`;\r\n\r\nconst SetterWrapper = styled.div`\r\n  align: center;\r\n  background: linear-gradient(-5deg, ${props => props.theme.bgSecond}, ${props => props.theme.bgFirst});\r\n  border-radius: 5px;\r\n  margin: 0 10px;\r\n  padding: 0 5px 5px 5px;\r\n  width: 150px;\r\n`;\r\n\r\nconst Row = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-content: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst TimerWrapper = styled.div`\r\n  background: linear-gradient(-15deg, ${props => props.theme.bgFirst}, ${props => props.theme.bgSecond});\r\n  margin: 20px 0 40px;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst TimerLabel = styled.div`\r\n  color: ${props => props.theme.fgPrimary};\r\n  font-family: 'Patua One', serif;\r\n  font-size: 24px;\r\n  text-align: center;\r\n`;\r\n\r\nconst TimeDisplay = styled.div`\r\n  text-align: center;\r\n  color: ${props => props.theme.fgAccent};\r\n  font-family: 'Gugi', sans-serif;\r\n  font-size: 36px;\r\n  margin: 20px 0;\r\n`;\r\n\r\nexport {Button, LabelDiv, SetterWrapper, Row, TimerLabel, TimerWrapper, TimeDisplay}\r\n","import React from 'react';\r\nimport {Button, LabelDiv, Row, SetterWrapper} from \"./styled-elements\";\r\n\r\nfunction BreakSetter(props) {\r\n  const {length, inc, dec} = props;\r\n  return (\r\n    <SetterWrapper>\r\n      <LabelDiv id=\"break-label\">Break Length</LabelDiv>\r\n      <Row>\r\n        <Button id=\"break-decrement\" onClick={dec}>-</Button>\r\n        <LabelDiv as=\"span\" id=\"break-length\">{Math.floor(length / 60)}</LabelDiv>\r\n        <Button id=\"break-increment\" onClick={inc}>+</Button>\r\n      </Row>\r\n    </SetterWrapper>\r\n  );\r\n}\r\n\r\nexport default BreakSetter;","import React from 'react';\r\nimport {Button, LabelDiv, Row, SetterWrapper} from \"./styled-elements\";\r\n\r\nfunction SessionSetter(props) {\r\n  const {length, inc, dec} = props;\r\n  return (\r\n    <SetterWrapper>\r\n      <LabelDiv id=\"session-label\">Session Length</LabelDiv>\r\n      <Row>\r\n        <Button id=\"session-decrement\" onClick={dec}>-</Button>\r\n        <LabelDiv as=\"span\" id=\"session-length\">{Math.floor(length / 60)}</LabelDiv>\r\n        <Button id=\"session-increment\" onClick={inc}>+</Button>\r\n      </Row>\r\n    </SetterWrapper>\r\n  );\r\n}\r\n\r\nexport default SessionSetter;","import React from 'react';\r\nimport {Button, TimeDisplay, TimerLabel, TimerWrapper} from \"./styled-elements\";\r\n\r\nfunction Timer(props) {\r\n  const {timerLabel, reset, timeLeft, startStop} = props;\r\n\r\n  function getMinuteSecondString(seconds) {\r\n    const minute = Math.floor(seconds / 60).toString().padStart(2, '0');\r\n    const second = (seconds % 60).toString().padStart(2, '0');\r\n    return `${minute}:${second}`;\r\n  }\r\n\r\n  return (\r\n    <TimerWrapper>\r\n      <TimerLabel id=\"timer-label\">{timerLabel}</TimerLabel>\r\n      <TimeDisplay id=\"time-left\">{getMinuteSecondString(timeLeft)}</TimeDisplay>\r\n      <Button primary id=\"start_stop\" onClick={startStop}>Start/Stop</Button>\r\n      <Button id=\"reset\" onClick={reset}>Reset</Button>\r\n    </TimerWrapper>\r\n  );\r\n}\r\n\r\nexport default Timer;","import {createGlobalStyle} from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body {\r\n    @import url('https://fonts.googleapis.com/css?family=Gugi|Patua+One');\r\n    padding: 0;\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nconst theme = {\r\n  fgPrimary: \"palevioletred\",\r\n  fgAccent: \"mediumvioletred\",\r\n  //fgSecondary: \"#853388\",\r\n  bgFirst: \"floralwhite\",\r\n  bgSecond: \"#f4e1f5\"\r\n};\r\n\r\nexport {GlobalStyle, theme};","import React, {useRef, useState} from 'react';\nimport {ThemeProvider} from 'styled-components';\n\nimport useInterval from './customHooks/useInterval';\n\nimport BreakSetter from './components/BreakSetter';\nimport SessionSetter from './components/SessionSetter';\nimport Timer from './components/Timer';\n\nimport {Row} from './components/styled-elements';\nimport {GlobalStyle, theme} from './theme';\n\n\nfunction App() {\n  const [breakLength, setBreakLength] = useState(_minuteToSeconds(5));\n  const [sessionLength, setSessionLength] = useState(_minuteToSeconds(25));\n  const [timeLeft, setTimeLeft] = useState(_minuteToSeconds(25));\n  const [isRunning, setIsRunning] = useState(false);\n  const [isBreak, setIsBreak] = useState(false);\n  const beepRef = useRef();\n\n  function incBreakLength() {\n    _withinLengthLimit(setBreakLength, breakLength, _minuteToSeconds(1));\n  }\n\n  function decBreakLength() {\n    _withinLengthLimit(setBreakLength, breakLength, _minuteToSeconds(-1));\n  }\n\n  function incSessionLength() {\n    if (!isRunning) {\n      _withinLengthLimit(setTimeLeft, timeLeft, _minuteToSeconds(1));\n    }\n    _withinLengthLimit(setSessionLength, sessionLength, _minuteToSeconds(1));\n  }\n\n  function decSessionLength() {\n    if (!isRunning) {\n      _withinLengthLimit(setTimeLeft, timeLeft, _minuteToSeconds(-1));\n    }\n    _withinLengthLimit(setSessionLength, sessionLength, _minuteToSeconds(-1));\n  }\n\n  function toggleIsRunning() {\n    setIsRunning(!isRunning);\n  }\n\n  function reset() {\n    _stopBeep();\n    setTimeLeft(_minuteToSeconds(25));\n    setBreakLength(_minuteToSeconds(5));\n    setSessionLength(_minuteToSeconds(25));\n    setIsRunning(false);\n    setIsBreak(false);\n  }\n\n  useInterval(_tick, isRunning ? 1000 : null);\n\n\n  function _minuteToSeconds(minute) {\n    return minute * 60;\n  }\n\n  function _withinLengthLimit(setFunction, value, change) {\n    const MAX_LENGTH = 3600;\n    const MIN_LENGTH = 60;\n    const newValue = value + change;\n    if (MIN_LENGTH <= newValue && newValue <= MAX_LENGTH) {\n      setFunction(newValue);\n    }\n  }\n\n  function _tick() {\n    const timeLeftNow = timeLeft - 1;\n    if (timeLeftNow < 0) {\n      _changeSessionTo(!isBreak);\n    } else {\n      if (timeLeftNow === 0) _playBeepFromStart();\n      setTimeLeft(timeLeftNow);\n    }\n  }\n\n  function _changeSessionTo(nowIsBreak) {\n    setIsBreak(nowIsBreak);\n    setTimeLeft(nowIsBreak ? breakLength : sessionLength);\n  }\n\n  function _getTimerLabel() {\n    return isBreak ? 'Break' : 'Work';\n  }\n\n  function _playBeepFromStart() {\n    _stopBeep();\n    beepRef.current.play();\n  }\n\n  function _stopBeep() {\n    beepRef.current.pause();\n    beepRef.current.currentTime = 0;\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div>\n        <GlobalStyle/>\n        <Row>\n          <Timer timeLeft={timeLeft} reset={reset} startStop={toggleIsRunning} timerLabel={_getTimerLabel()}/>\n        </Row>\n        <Row>\n          <BreakSetter length={breakLength} inc={incBreakLength} dec={decBreakLength}/>\n          <SessionSetter length={sessionLength} inc={incSessionLength} dec={decSessionLength}/>\n        </Row>\n        <audio id=\"beep\" ref={beepRef}\n               src=\"https://docs.google.com/uc?export=download&id=177Le-I9Z4arIsILN9xicG7-GkGt09PdM\"/>\n      </div>\n    </ThemeProvider>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}